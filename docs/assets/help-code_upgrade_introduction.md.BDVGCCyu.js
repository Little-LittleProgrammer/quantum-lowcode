import{_ as n,c as e,o as s,a8 as l}from"./chunks/framework.BrmF0WDH.js";const h=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"help-code/upgrade/introduction.md","filePath":"help-code/upgrade/introduction.md","lastUpdated":1752491454000}'),i={name:"help-code/upgrade/introduction.md"};function o(t,a,r,c,p,d){return s(),e("div",null,a[0]||(a[0]=[l(`<h1 id="介绍" tabindex="1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="目录结构" tabindex="1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── apps</span></span>
<span class="line"><span>│   ├── playground                    // 低代码编辑器演示应用</span></span>
<span class="line"><span>│   └── quantum-docs                  // 文档站点</span></span>
<span class="line"><span>├── packages</span></span>
<span class="line"><span>│   ├── cli                          // 命令行工具（开发中）</span></span>
<span class="line"><span>│   ├── core                         // 核心库，对节点操作、全局事件、数据进行统一管理</span></span>
<span class="line"><span>│   ├── data-source                  // 数据源管理</span></span>
<span class="line"><span>│   ├── editor                       // 可视化编辑器</span></span>
<span class="line"><span>│   ├── sandbox                      // 沙箱画布，负责编辑器与运行时通信</span></span>
<span class="line"><span>│   ├── schemas                      // 低代码schema声明协议</span></span>
<span class="line"><span>│   ├── ui                          // Vue3组件库</span></span>
<span class="line"><span>│   ├── ui-vue2                     // Vue2组件库</span></span>
<span class="line"><span>│   └── utils                       // 工具库</span></span>
<span class="line"><span>├── runtime                         // 运行时</span></span>
<span class="line"><span>│   ├── vue2-active                 // Vue2运行时渲染器</span></span>
<span class="line"><span>│   └── vue3-active                 // Vue3运行时渲染器</span></span>
<span class="line"><span>└── package.json</span></span></code></pre></div><h2 id="架构设计" tabindex="1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h2><h3 id="核心模块介绍" tabindex="1">核心模块介绍 <a class="header-anchor" href="#核心模块介绍" aria-label="Permalink to &quot;核心模块介绍&quot;">​</a></h3><h4 id="_1-core-核心库" tabindex="1">1. Core（核心库） <a class="header-anchor" href="#_1-core-核心库" aria-label="Permalink to &quot;1. Core（核心库）&quot;">​</a></h4><ul><li><strong>功能</strong>: 定义转换数据模型(schemas)、文件模型、数据绑定、渲染器、I/O</li><li><strong>职责</strong>: <ul><li>数据模型管理</li><li>组件props绑定方案</li><li>事件系统管理</li><li>数据源绑定方案</li></ul></li></ul><h4 id="_2-editor-编辑器" tabindex="1">2. Editor（编辑器） <a class="header-anchor" href="#_2-editor-编辑器" aria-label="Permalink to &quot;2. Editor（编辑器）&quot;">​</a></h4><ul><li><strong>功能</strong>: 可视化编辑器模块，包括物料、画布、配置、拖拽节点</li><li><strong>组件架构</strong>: <ul><li><strong>布局组件</strong>: Framework(布局)、Workspace(工作区)、Sandbox(画布)</li><li><strong>Service Store</strong>: 全局状态管理 <ul><li>EditorService: 关联core模块，实现节点的设置读取更新</li><li>UiService: 画布功能的样式管理</li><li>DataSourceService: 数据源管理</li><li>ComponentService: 组件管理</li></ul></li><li><strong>Hooks</strong>: Use-service等钩子函数</li></ul></li></ul><h4 id="_3-sandbox-沙箱画布" tabindex="1">3. Sandbox（沙箱画布） <a class="header-anchor" href="#_3-sandbox-沙箱画布" aria-label="Permalink to &quot;3. Sandbox（沙箱画布）&quot;">​</a></h4><ul><li><strong>功能</strong>: 画布功能，负责编辑器与运行时通信</li><li><strong>核心类</strong>: <ul><li><strong>BoxCore</strong>: 负责统一对外接口，管理BoxRender、BoxMask、ActionManager</li><li><strong>BoxRender</strong>: 基于iframe加载runtimeUrl，支持组件增删改查</li><li><strong>BoxMask</strong>: 蒙层，隔绝鼠标事件，避免组件事件被触发</li><li><strong>ActionManager</strong>: 监听鼠标键盘事件，实现单选、多选、高亮行为</li></ul></li></ul><h4 id="_4-data-source-数据源" tabindex="1">4. Data-Source（数据源） <a class="header-anchor" href="#_4-data-source-数据源" aria-label="Permalink to &quot;4. Data-Source（数据源）&quot;">​</a></h4><ul><li><strong>功能</strong>: 全局数据源和方法管理</li><li><strong>特性</strong>: <ul><li>支持base和http两种数据源类型</li><li>数据绑定和依赖管理</li><li>全局方法调用</li></ul></li></ul><h4 id="_5-ui组件库" tabindex="1">5. UI组件库 <a class="header-anchor" href="#_5-ui组件库" aria-label="Permalink to &quot;5. UI组件库&quot;">​</a></h4><ul><li><strong>UI</strong>: Vue3组件库，提供基础组件</li><li><strong>UI-Vue2</strong>: Vue2组件库，支持Vue2项目</li><li><strong>特性</strong>: 跨框架组件支持</li></ul><h4 id="_6-runtime-运行时" tabindex="1">6. Runtime（运行时） <a class="header-anchor" href="#_6-runtime-运行时" aria-label="Permalink to &quot;6. Runtime（运行时）&quot;">​</a></h4><ul><li><strong>功能</strong>: 进行时渲染，与低代码引擎完全脱离</li><li><strong>特性</strong>: <ul><li>通过sandbox画布传递schemas</li><li>支持Vue2和Vue3两种运行时</li><li>可视化页面所见即所得</li></ul></li></ul><h2 id="原理介绍" tabindex="1">原理介绍 <a class="header-anchor" href="#原理介绍" aria-label="Permalink to &quot;原理介绍&quot;">​</a></h2><h3 id="schema解析渲染" tabindex="1">Schema解析渲染 <a class="header-anchor" href="#schema解析渲染" aria-label="Permalink to &quot;Schema解析渲染&quot;">​</a></h3><p>通过载入保存的 <code>lowcodeSchema</code>配置，通过渲染器渲染页面。容器和组件在配置中呈树状结构，渲染器会递归配置，从而渲染出页面所有组件。</p><h3 id="编辑器与runtime通讯" tabindex="1">编辑器与Runtime通讯 <a class="header-anchor" href="#编辑器与runtime通讯" aria-label="Permalink to &quot;编辑器与Runtime通讯&quot;">​</a></h3><p>本质上是通过发布订阅模式实现：</p><ol><li>将 <code>onRuntimeReady</code> 方法注入到 <code>window</code> 的 <code>quantum</code> 中</li><li>初始化时订阅<code>runtime-ready</code>事件</li><li>当<code>iframe</code>里的项目初始化完成时，触发<code>runtime-ready</code>事件</li><li>获取<code>runtime</code>配置的事件，从而实现双向通讯</li></ol><h3 id="组件渲染流程" tabindex="1">组件渲染流程 <a class="header-anchor" href="#组件渲染流程" aria-label="Permalink to &quot;组件渲染流程&quot;">​</a></h3><ol><li><strong>Schema解析</strong>: 解析lowcodeSchema配置</li><li><strong>组件注册</strong>: 注册业务组件到运行时</li><li><strong>递归渲染</strong>: 根据树状结构递归渲染组件</li><li><strong>事件绑定</strong>: 绑定组件事件和数据源</li><li><strong>实时预览</strong>: 通过沙箱实现实时预览效果</li></ol><h3 id="数据流转" tabindex="1">数据流转 <a class="header-anchor" href="#数据流转" aria-label="Permalink to &quot;数据流转&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>编辑器操作 -&gt; Schema更新 -&gt; Sandbox通信 -&gt; Runtime渲染 -&gt; 页面更新</span></span>
<span class="line"><span>    ↑                                                      ↓</span></span>
<span class="line"><span>事件反馈 &lt;- 组件交互 &lt;- 用户操作 &lt;- 页面展示 &lt;- 组件渲染</span></span></code></pre></div>`,27)]))}const g=n(i,[["render",o]]);export{h as __pageData,g as default};

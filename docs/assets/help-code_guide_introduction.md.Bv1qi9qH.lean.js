import{_ as o,c as a,o as t,a8 as i}from"./chunks/framework.BrmF0WDH.js";const m=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"help-code/guide/introduction.md","filePath":"help-code/guide/introduction.md","lastUpdated":1752491454000}'),l={name:"help-code/guide/introduction.md"};function d(r,e,c,n,u,s){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="介绍" tabindex="1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="简介" tabindex="1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Quantum可视化低代码平台 是一个前端低代码解决方案, 意在帮助开发者快速搭建可视化平台</p><h2 id="优势" tabindex="1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><ul><li><strong>支持不同前端框架</strong>, 使用编辑器的业务方可以采用自己熟悉的前端框架，来开发自己的业务组件，比如vue2、vue3、react</li><li><strong>强大的配置</strong>, 支持表单联动的配置能力</li><li><strong>丰富的拓展能力</strong>, 支持也无妨自定义组件、插件甚至二次开发来拓展编辑器能力</li><li><strong>跨平台</strong>, 可实现 <code>h5</code> 或者 <code>pc</code> 端的开发</li></ul><h2 id="编辑器" tabindex="1">编辑器 <a class="header-anchor" href="#编辑器" aria-label="Permalink to &quot;编辑器&quot;">​</a></h2><p>编辑器是可视化搭建平台的主要内容，其中包含以下内容：</p><ul><li><strong>模拟器</strong>: 居中位置渲染了当前页面配置的组件内容, 模拟真实页面的展示内容、</li><li><strong>源码编辑器</strong>: 右侧展示了当前项目各个页面组件的<code>JSON</code>配置, 可编辑进行实时渲染</li></ul><h2 id="核心库" tabindex="1">核心库 <a class="header-anchor" href="#核心库" aria-label="Permalink to &quot;核心库&quot;">​</a></h2><ul><li><code>@quantum-lowcode/core</code>: 对组件进行跨框架管理与一些通用复杂逻辑的实现。</li><li><code>@quantum-lowcode/sandbox</code>: 实现在编辑器与渲染器之间的通讯</li><li><code>@quantum-lowcode/editor</code>: 实现一个可视化编辑器</li><li><code>@quantum-lowcode/ui</code>: 提供一些vue3基础组件</li><li><code>@quantum-lowcode/schemas</code>: 规定基本的节点类型以及常量枚举</li><li><code>@quantum-lowcode/data</code>: 全局数据以及方法管理</li><li><code>runtime</code>: 实现在编辑器中对使用不同框架的组件的渲染</li></ul>',10)]))}const p=o(l,[["render",d]]);export{m as __pageData,p as default};

import{_ as a,c as o,o as t,a8 as r}from"./chunks/framework.BrmF0WDH.js";const m=JSON.parse('{"title":"基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"help-code/guide/conception.md","filePath":"help-code/guide/conception.md","lastUpdated":1752491454000}'),d={name:"help-code/guide/conception.md"};function c(i,e,n,u,h,l){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="基础概念" tabindex="1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h1><p>通过讲述一些基础概念, 帮助开发者了解<code>Quantum</code>是如何运行的</p><h2 id="名词概念" tabindex="1">名词概念 <a class="header-anchor" href="#名词概念" aria-label="Permalink to &quot;名词概念&quot;">​</a></h2><h3 id="quantum" tabindex="1">Quantum <a class="header-anchor" href="#quantum" aria-label="Permalink to &quot;Quantum&quot;">​</a></h3><p>是本低代码搭建平台的别称: 量子低代码搭建平台</p><h3 id="runtime-运行时" tabindex="1">runtime 运行时 <a class="header-anchor" href="#runtime-运行时" aria-label="Permalink to &quot;runtime 运行时&quot;">​</a></h3><p>我们把最终要渲染的页面统一称为 <code>runtime</code>、runtime是承载 <code>Quantum</code> 项目页面的运行环境. runtime 分为工作区与真实项目:</p><ul><li>工作区是 <code>runtime</code> 的一个具体实例, 模拟器, 可实现实时的渲染</li><li>真实项目 是发布上线后, 用户访问的真实项目页面<br> 包含: <code>runtime-vue2</code>, <code>runtime-vue3</code></li></ul><h3 id="渲染器" tabindex="1">渲染器 <a class="header-anchor" href="#渲染器" aria-label="Permalink to &quot;渲染器&quot;">​</a></h3><p>渲染器是 <code>Quantum</code> 平台的核心, 负责将 <code>lowcodeSchemas</code> 转换为真实的页面, 并将页面渲染到 <code>runtime</code> 中.<br> 即 <code>runtime/render-vue2-active/src</code>目录下内容</p><h3 id="引擎" tabindex="1">引擎 <a class="header-anchor" href="#引擎" aria-label="Permalink to &quot;引擎&quot;">​</a></h3><p>引擎是 <code>Quantum</code> 低代码平台的核心, 主要提供编辑器与运行时的通讯, 数据节点的管理, schemas的配置, 联动功能 以及 拖拽功能<br> 包含: <code>core</code>, <code>editor</code>, <code>data</code>, <code>sandbox</code>, <code>ui</code>, <code>schemas</code></p><h3 id="组件" tabindex="1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h3><p>组件是 Quantum 可配置页面元素的最小单位.</p><h3 id="容器" tabindex="1">容器 <a class="header-anchor" href="#容器" aria-label="Permalink to &quot;容器&quot;">​</a></h3><p>容器是 Quantum 可配置页面元素的一个基础单位, 页面本省就是一个容器, 容器中可以配置容器与组件,所以容器理论上可以无限嵌套。</p><h3 id="页面" tabindex="1">页面 <a class="header-anchor" href="#页面" aria-label="Permalink to &quot;页面&quot;">​</a></h3><p>页面是 Quantum 作为一个可视化编辑器经过配置后，最终得到的呈现结果. 搭建后的页面会被发布上线, 供用户访问</p><h3 id="dsl" tabindex="1">DSL <a class="header-anchor" href="#dsl" aria-label="Permalink to &quot;DSL&quot;">​</a></h3><p>lowcodeSchemas 是编辑器搭建页面的最终产物, 其中包含了所有的信息(组件, 页面, 公共事件, 数据等等), 所有的操作行为都会映射到schemas上, 格式: <a href="./../../api/schema/">schemas</a></p><h3 id="画布" tabindex="1">画布 <a class="header-anchor" href="#画布" aria-label="Permalink to &quot;画布&quot;">​</a></h3><p>画布就是承载运行时的容器</p>',22)]))}const p=a(d,[["render",c]]);export{m as __pageData,p as default};
